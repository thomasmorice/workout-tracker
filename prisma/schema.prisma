// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//     provider        = "prisma-client-js"
//     previewFeatures = ["referentialIntegrity"]
// }

// datasource db {
//     provider             = "mysql"
//     url                  = env("DATABASE_URL")
//     referentialIntegrity = "prisma"
//     shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
// }

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // url      = "file:./db.sqlite"
    url      = env("DATABASE_URL")
}

model Workout {
    id             Int             @id @default(autoincrement())
    name           String?
    difficulty     Difficulty?
    elementType    ElementType     @default(UNCLASSIFIED)
    workoutType    WorkoutType?
    isDoableAtHome Boolean         @default(false)
    description    String          @unique
    totalTime      Float?
    createdAt      DateTime        @default(now())
    creator        User            @relation(fields: [creatorId], references: [id])
    creatorId      String
    updatedAt      DateTime        @updatedAt
    workoutResults WorkoutResult[]
}

model WorkoutSession {
    id             Int             @id @default(autoincrement())
    date           DateTime
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    workoutResults WorkoutResult[]
    event          Event?
    athlete        User            @relation(fields: [athleteId], references: [id])
    athleteId      String          @default("cl6jsjxy00006uyo8h2v8fr2e")
}

// model Event {
//     id               Int             @id @default(autoincrement())
//     workoutSession   WorkoutSession? @relation(fields: [workoutSessionId], references: [id])
//     workoutSessionId Int?            @unique
//     profile          Profile?        @relation(fields: [profileId], references: [id])
//     profileId        Int?            @unique
//     personalRecord   PersonalRecord? @relation(fields: [personalRecordId], references: [id])
//     personalRecordId Int?            @unique
//     eventDate        DateTime           
//     createdAt        DateTime        @default(now())
//     updatedAt        DateTime        @updatedAt
// }

model WorkoutResult {
    id                          Int            @id @default(autoincrement())
    workoutSessionId            Int
    workoutSession              WorkoutSession @relation(fields: [workoutSessionId], references: [id])
    order                       Int
    workoutId                   Int
    workout                     Workout        @relation(fields: [workoutId], references: [id])
    isRx                        Boolean?
    totalReps                   Int?
    time                        Int? // represented in seconds 
    weight                      Float? // represented in Kg
    rating                      Int? // between 1-5 but might change
    description                 String?
    shouldRecommendWorkoutAgain Boolean        @default(false)
    createdAt                   DateTime       @default(now())
    updatedAt                   DateTime       @updatedAt
}

model Profile {
    id    Int    @id @default(autoincrement())
    event Event?
}

model PersonalRecord {
    id    Int    @id @default(autoincrement())
    type  String
    value Int
    event Event?
}

enum Difficulty {
    GREEN
    YELLOW
    RED
    BLACK
}

enum WorkoutType {
    EMOM
    AMRAP
    FOR_TIME
    ONE_REP_MAX
}

enum ElementType {
    UNCLASSIFIED
    WOD
    STRENGTH_OR_SKILLS
    GYMNASTICS
    STRENGTH
    INTENSE_MOBILITY
    TEAMWOD
    ENDURANCE
    OLYMPIC_WEIGHTLIFTING
}

enum ProfileEventType {
    WEIGHT
    PERSONAL_RECORD
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String           @id @default(cuid())
    name            String?
    email           String?          @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    workouts        Workout[]
    workoutSessions WorkoutSession[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
